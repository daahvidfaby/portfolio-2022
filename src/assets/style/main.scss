@use "sass:math";
@use "sass:string";

:root {
    --offset: 0%;
    --size: 0px;
}

/****
    FONTS
***/

@font-face {
    font-family: 'Playfair Display';
    src: url('../fonts/playfairdisplay-black-webfont.woff2') format('woff2'),
         url('../fonts/playfairdisplay-black-webfont.woff') format('woff');
    font-weight: 900;
    font-style: normal;
}

@font-face {
    font-family: 'Playfair Display';
    src: url('../fonts/playfairdisplay-bold-webfont.woff2') format('woff2'),
         url('../fonts/playfairdisplay-bold-webfont.woff') format('woff');
    font-weight: 700;
    font-style: normal;
}

@font-face {
    font-family: 'Playfair Display';
    src: url('../fonts/playfairdisplay-regular-webfont.woff2') format('woff2'),
         url('../fonts/playfairdisplay-regular-webfont.woff') format('woff');
    font-weight: 400;
    font-style: normal;
}


@font-face {
    font-family: 'Metropolis';
    src: url('../fonts/metropolis-regular-webfont.woff2') format('woff2'),
         url('../fonts/metropolis-regular-webfont.woff') format('woff');
    font-weight: 400;
    font-style: normal;
}

@font-face {
    font-family: 'Metropolis';
    src: url('../fonts/metropolis-semibold-webfont.woff2') format('woff2'),
         url('../fonts/metropolis-semibold-webfont.woff') format('woff');
    font-weight: 700;
    font-style: normal;
}


$font-01 : 'Playfair Display';
$font-02 : 'Metropolis';

/****
    VARIABLES
***/

$color-01 : #F0EEE5;
$color-02 : #304E37;
$color-03 : #687C6F;
$color-04 : #C8774A;
$color-05 : #54715f;


$breakpoints: (
    xs: 360px,
    sm: 576px,
    md: 992px,
    lg: 1330px,
  );


/****
    MIXINS
***/

@mixin breakpoint($breakpoint) {

    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {
        // Prints a media query based on the value
        @media (min-width: map-get($breakpoints, $breakpoint)) {
        @content;
        }
    }

    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
            + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}



/****
    FUNCTIONS
***/

$html-font-size: 16px;
@function stripUnit($value) {
    @return math.div($value, $value * 0 + 1);
}
@function rem($pxValue) {
    @return #{math.div(stripUnit($pxValue), stripUnit($html-font-size))}rem;
}



/****
    BASIC STYLING
***/

@import './basic/reset.scss';
@import './basic/titles.scss';
@import './basic/texts.scss';


html {
    font-family: $font-02;
    font-size: rem(16);
    line-height: 1.45;
    scroll-behavior: smooth;
}

.page-container {
    background-color: $color-01;
    color: $color-02;

    transition: all 0.2s;

    &.dark-mode {
        background-color: $color-02;
        color: $color-01;
    }
}

.container {
    padding-left: rem(20);
    padding-right: rem(20);
    max-width: 75em;
    margin: 0 auto;

    @include breakpoint(sm) {
        padding-left: 4em;
        padding-right: 4em;
    }

    @include breakpoint(lg) {
        padding-left: 0;
        padding-right: 0;
    }

    &--small {
        @include breakpoint(md) {
            padding-left: 0;
            padding-right: 0;
            width: 66.66%;
        }
    }

    &--spaced {
        padding-top: rem(30);
        padding-bottom: rem(30);
    }
}

/****
    COMPONENTS
***/

@import './components/button.scss';
@import './components/accordion.scss';



/****
    SECTIONS
***/

@import './sections/header.scss';
@import './sections/hero.scss';
@import './sections/introduction.scss';
@import './sections/consulting.scss';
@import './sections/typology.scss';
@import './sections/contact.scss';
@import './sections/footer.scss';



.page-container {
    &.dark-mode {
        .animated-cta {
            background-color: $color-01;
            color: $color-02;
        }

        .animated-cta-container::before {
            background-color: $color-01;
        }
    }
}

.animated-cta-container {
    position: fixed;
    bottom: rem(24);
    right: rem(24);

    &::before {
        content: "";
        position: absolute;
        right: 50%;
        bottom: 50%;
        transform: translateX(50%) translateY(-100vh);
        width: rem(40);
        height: rem(40);
        background-color: $color-02;
        border-radius: 100%;
        transition: transform 0.6s ease-out;
    }

    &.show {

        .animated-cta {
            width: auto;
            height: auto;
            opacity: 1;
            transition: opacity 0.16s ease-in 0.6s, background-color 0.2s ease-in, color 0.2s ease-in;
        }

        &::before {
            transform: translateX(50%) translateY(50%);
        }

    }
}

.animated-cta {
    position: relative;
    z-index: 2;
    border-radius: rem(8);
    width: rem(30);
    height: rem(40);
    opacity: 0;
    transition: background-color 0.2s ease-in, color 0.2s ease-in;
}